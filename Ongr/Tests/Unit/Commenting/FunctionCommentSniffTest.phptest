<?php

/*
 * This file is part of the ONGR package.
 *
 * (c) NFQ Technologies UAB <info@nfq.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test;

/**
 * FunctionCommentSniff class.
 */
class FunctionCommentSniffTest
{
    /**
     * Foo.
     *
     * There is a white space after "Foo."
     * Some editors may remove it
     * so if you edit this file check if it is present.
     *
     * @param mixed $bar
     */
    protected function foo($bar)
    {
        foo($bar);
    }

    /**
     *  Bar.
     *
     *  There is a extra white space before "Bar."
     * and this sentence.
     *
     * @param mixed $bar
     */
    protected function bar($bar)
    {
        foo($bar);
    }

    /**
     * Bar.
     *
     * @param mixed $bar
     */
    protected function fooBar($bar)
    {
        foo($bar);
    }

    /**
     * Bar.
     *
     * Foo.
     *
     * @param mixed $bar
     */
    protected function fooBar2($bar)
    {
        foo($bar);
    }

    /**
     * @param mixed $bar
     */
    protected function fooBar3($bar)
    {
        foo($bar);
    }

    /**
     * Bar.
     *
     * @return mixed Correct comment.
     */
    protected function fooBar4()
    {
        return foo($bar);
    }

    /**
     * Bar.
     *
     * @return mixed No full stop
     */
    protected function fooBar5()
    {
        return foo($bar);
    }

    /**
     * Bar.
     *
     * @return mixed first letter non-capital.
     */
    protected function fooBar6()
    {
        return foo($bar);
    }

    /**
     * Bar.
     *
     * @return mixed first letter non-capital, no full stop
     */
    protected function fooBar7()
    {
        return foo($bar);
    }

    /**
     * @inheritdoc
     */
    protected function fooBar7()
    {
        return foo($bar);
    }

    /**
     * Mapping is compared with loaded, if needed updates it and returns true.
     *
     * @param array $types Types to update.
     *
     * @return bool Foo
     *
     * @throws \LogicException
     *
     * @deprecated Will be removed in 1.0. Please now use Bar#foo().
     */
    public function foo(array $types = [])
    {
        return $this->bar($types);
    }

    /**
     * Short description.
     *
     * @deprecated Will be removed in 1.0. Please now use Bar#foo().
     */
    public function updateMapping()
    {
        return $this->updateTypes();
    }

    /**
     * Short description.
     *
     * @deprecated will be removed in 1.0. Please now use Connection#updateTypes()
     */
    public function updateMapping()
    {
        return $this->updateTypes();
    }

    /**
     * Constructor for geo sort.
     *
     * @param string       $field    Field name.
     *
     * @param array|string $location Possible types examples:
     *                               [-70, 40]
     *              ["lat" : 40, "lon" : -70]
     *                               "-70,40".
     * @param string       $order    Order.
     * @param string       $unit     Units for measuring the distance.
     *                               Alfa.
     * @param string       $mode     Mode.
     * @throws \LogicException
     * Comment.
     * @throws \Exception
     */
    public function __construct($field, $location, $order = self::ORDER_DESC, $unit = null, $mode = null)
    {
        $this->setLocation($location);
        $this->setUnit($unit);
        parent::__construct($field, $order, $mode);
    }

    /**
     * Bar.
     *
     * @param mixed $first  Comment is
     *                      very long.
     *
     * @param mixed $second Comment.
     */
    protected function fooBar7($first, $second)
    {
        foo();
    }

    /**
     * Constructor for geo sort.
     *
     * @param string       $field    Field name.
     * @param array|string $location Possible types examples:
     *                               [-70, 40]
     *                               ["lat" : 40, "lon" : -70]
     *                               "-70,40".
     * @param string       $order    Order.
     * @param string       $unit     Units for measuring the distance.
     *                               Alfa.
     * @param string       $mode     Mode.
     *
     * @throws \LogicException
     *
     * @throws \OtherException
     *
     * @return
     */
    public function __construct($field, $location, $order = self::ORDER_DESC, $unit = null, $mode = null)
    {
        $this->setLocation($location);
        $this->setUnit($unit);
        parent::__construct($field, $order, $mode);
        return;
    }
}
