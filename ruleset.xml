<?xml version="1.0"?>
<ruleset name="Ongr">
 <description>The Ongr coding standard.</description>

 <!-- Include some specific sniffs -->
 <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
 <rule ref="Generic.Commenting.Todo"/>
 <rule ref="Generic.ControlStructures.InlineControlStructure"/>
 <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
 <rule ref="Generic.Formatting.NoSpaceAfterCast"/>
 <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
 <rule ref="Generic.NamingConventions.ConstructorName"/>
 <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
 <rule ref="Generic.PHP.DeprecatedFunctions"/>
 <rule ref="Generic.PHP.DisallowShortOpenTag"/>
 <rule ref="Generic.PHP.LowerCaseKeyword"/>
 <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
 <rule ref="Generic.WhiteSpace.ScopeIndent"/>
 <rule ref="PEAR.ControlStructures.MultiLineCondition"/>
 <rule ref="PEAR.Files.IncludingFile"/>
 <rule ref="PEAR.Formatting.MultiLineAssignment"/>
 <rule ref="Zend.Debug.CodeAnalyzer"/>
 <rule ref="PSR2"/>

 <rule ref="Squiz">
     <!--Disabled Abstract prefix sniff, we are using deprecated ElasticsearchTestCase abstract class-->
     <exclude name="Ongr.NamingConventions.AbstractClassPrefix"/>

     <!--Exclude Generic rules used by squiz-->
     <exclude name="Generic.Formatting.MultipleStatementAlignment"/>
     <exclude name="Generic.Formatting.SpaceAfterCast"/>
     <exclude name="Generic.Strings.UnnecessaryStringConcat"/>

     <!--We dont use these checks-->
     <exclude name="Squiz.Commenting.ClosingDeclarationComment"/>
     <exclude name="Squiz.Commenting.FileComment"/>
     <exclude name="Squiz.Commenting.LongConditionClosingComment"/>
     <exclude name="Squiz.ControlStructures.ElseIfDeclaration"/>
     <exclude name="Squiz.Files.FileExtension"/>
     <exclude name="Squiz.Formatting.OperatorBracket"/>
     <exclude name="Squiz.Objects.ObjectInstantiation"/>
     <exclude name="Squiz.Operators.ComparisonOperatorUsage"/>
     <exclude name="Squiz.PHP.CommentedOutCode"/>
     <exclude name="Squiz.PHP.DisallowBooleanStatement"/>
     <exclude name="Squiz.PHP.DisallowComparisonAssignment"/>
     <exclude name="Squiz.PHP.DisallowInlineIf"/>
     <exclude name="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
     <exclude name="Squiz.PHP.Eval"/>
     <exclude name="Squiz.PHP.Heredoc"/>

     <!--These rules we override-->
     <exclude name="Squiz.Arrays.ArrayDeclaration"/>
     <exclude name="Squiz.Classes.ClassDeclaration"/>
     <exclude name="Squiz.Commenting.BlockComment"/>
     <exclude name="Squiz.Commenting.ClassComment"/>
     <exclude name="Squiz.Commenting.FunctionComment"/>
     <exclude name="Squiz.Commenting.FunctionCommentThrowTag"/>
     <exclude name="Squiz.Commenting.InlineComment"/>
     <exclude name="Squiz.Commenting.VariableComment"/>
     <exclude name="Squiz.ControlStructures.InlineIfDeclaration"/>
     <exclude name="Squiz.ControlStructures.SwitchDeclaration"/>
     <!--<exclude name="Squiz.NamingConventions.ConstantCase"/>-->
     <exclude name="Squiz.NamingConventions.ValidFunctionName"/>
     <exclude name="Squiz.NamingConventions.ValidVariableName"/>
     <exclude name="Squiz.Strings.ConcatenationSpacing"/>
     <exclude name="Squiz.Strings.DoubleQuoteUsage"/>
     <!--<exclude name="Squiz.WhiteSpace.CastSpacing"/>-->
     <exclude name="Squiz.WhiteSpace.ControlStructureSpacing"/>
     <exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace"/>
     <exclude name="Squiz.WhiteSpace.FunctionSpacing"/>
     <exclude name="Squiz.WhiteSpace.MemberVarSpacing"/>
     <exclude name="Squiz.WhiteSpace.ObjectOperatorSpacing"/>
     <exclude name="Squiz.WhiteSpace.OperatorSpacing"/>


     <!--Experimenting-->
     <!--<exclude name="Squiz.WhiteSpace.OperatorSpacing"/>-->
     <exclude name="Generic.Commenting.DocComment"/>
     <!--Skip JS files-->
     <exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket"/>
     <exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments"/>
     <!--Excluding EmbeddedPhpSniff-->
     <exclude name="Squiz.PHP.EmbeddedPhp"/>

 </rule>

<!--Concat operator spacing-->
<rule ref="Squiz.Strings.ConcatenationSpacing">
    <properties>
        <property name="spacing" value="1"/>
    </properties>
</rule>

 <!--Allow new line after "=>" -->
 <rule ref="Squiz.WhiteSpace.OperatorSpacing">
    <properties>
        <property name="ignoreNewlines" value="true"/>
    </properties>
 </rule>

    <!-- Lines can be 120 chars long, but never show errors -->
 <rule ref="Generic.Files.LineLength">
  <properties>
   <property name="lineLimit" value="120"/>
   <property name="absoluteLineLimit" value="0"/>
  </properties>
 </rule>

 <!-- Use Unix newlines -->
 <rule ref="Generic.Files.LineEndings">
  <properties>
   <property name="eolChar" value="\n"/>
  </properties>
 </rule>

 <!-- We don't want gsjlint throwing errors for things we already check -->
 <rule ref="Generic.Debug.ClosureLinter">
  <properties>
   <property name="errorCodes" type="array" value="0210"/>
   <property name="ignoreCodes" type="array" value="0001,0110,0240"/>
  </properties>
 </rule>
 <rule ref="Generic.Debug.ClosureLinter.ExternalToolError">
  <message>%2$s</message>
 </rule>

 <!-- Only one argument per line in multi-line function calls -->
 <rule ref="PEAR.Functions.FunctionCallSignature">
  <properties>
   <property name="allowMultipleArguments" value="false"/>
  </properties>
 </rule>

</ruleset>
